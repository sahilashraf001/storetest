// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview AI-powered product recommendations based on viewing history.
 *
 * - recommendProducts - A function that provides product recommendations.
 * - RecommendProductsInput - The input type for the recommendProducts function.
 * - RecommendProductsOutput - The return type for the recommendProducts function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RecommendProductsInputSchema = z.object({
  viewingHistory: z
    .array(z.string())
    .describe('An array of product IDs representing the user viewing history.'),
  maxRecommendations: z
    .number()
    .default(5)
    .describe('The maximum number of product recommendations to return.'),
});
export type RecommendProductsInput = z.infer<typeof RecommendProductsInputSchema>;

const RecommendProductsOutputSchema = z.object({
  productRecommendations: z
    .array(z.string())
    .describe('An array of product IDs representing the product recommendations.'),
});
export type RecommendProductsOutput = z.infer<typeof RecommendProductsOutputSchema>;

export async function recommendProducts(input: RecommendProductsInput): Promise<RecommendProductsOutput> {
  return recommendProductsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'recommendProductsPrompt',
  input: {schema: RecommendProductsInputSchema},
  output: {schema: RecommendProductsOutputSchema},
  prompt: `You are a product recommendation expert for a CCTV security product website.
  Given a user's viewing history, recommend similar or related products that might interest them.
  Return a list of product IDs for the recommended products.

  Viewing History: {{#each viewingHistory}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}

  Product Recommendations ({{maxRecommendations}} max):
  `, // Ensure the output is a list of product IDs
});

const recommendProductsFlow = ai.defineFlow(
  {
    name: 'recommendProductsFlow',
    inputSchema: RecommendProductsInputSchema,
    outputSchema: RecommendProductsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
